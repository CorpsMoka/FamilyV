-- -- DO NOT TOUCHY, CONTACT Michael G/TheStonedTurtle if anything is broken.
-- -- DO NOT TOUCHY, CONTACT Michael G/TheStonedTurtle if anything is broken.
-- -- DO NOT TOUCHY, CONTACT Michael G/TheStonedTurtle if anything is broken.
-- -- DO NOT TOUCHY, CONTACT Michael G/TheStonedTurtle if anything is broken.
-- -- DO NOT TOUCHY, CONTACT Michael G/TheStonedTurtle if anything is broken.
--
-- local selfDeathMessage = "~o~Vous êtes ~s~mort."
-- local deathSuicideMessage = "~o~Vous vous êtes ~s~suicidé."
--
-- RegisterNUICallback("notifications", function(data, cb)
-- 	local action = data.action
-- 	local state = data.newstate
-- 	local request = data.data[3]
-- 	local text,text2
--
-- 	if(state) then
-- 		text = "~g~ON"
-- 		text2 = "~r~OFF"
-- 	else
-- 		text = "~r~OFF"
-- 		text2 = "~g~ON"
-- 	end
--
-- 	if(action=="players")then
-- 		featurePlayerNotifications = state
-- 		drawNotification("Notifications joueurs : "..text)
--
-- 	elseif(action=="death")then
-- 		featureDeathNotifications = state
-- 		drawNotification("Notifications morts : "..text)
-- 	end
--
-- 	if(cb)then cb("ok") end
-- end)
--
-- RegisterNetEvent( 'mellotrainer:playerJoined' )
-- AddEventHandler( 'mellotrainer:playerJoined', function( ID )
-- 	local id = tonumber( ID )
-- 	if ( featurePlayerNotifications and id ~= PlayerId() ) then
-- 		local name = GetPlayerName( id )
-- 		drawNotification( "~g~<C>"..name.."</C> ~s~s'est connecté." )
-- 	end
-- end )
--
-- RegisterNetEvent( 'mellotrainer:playerLeft' )
-- AddEventHandler( 'mellotrainer:playerLeft', function( name )
-- 	if ( featurePlayerNotifications ) then
-- 		drawNotification( "~r~<C>" .. name .. "</C> ~s~s'est déconnecté." )
-- 	end
-- end )
--
-- -- Better Death Messages
-- function killActionFromWeaponHash(weaponHash)
-- 	if (weaponHash ~= nil)then
-- 		if (weaponHash == GetHashKey("WEAPON_RUN_OVER_BY_CAR") or weaponHash == GetHashKey("WEAPON_RAMMED_BY_CAR")) then
-- 			return "aplati";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_CROWBAR") or weaponHash == GetHashKey("WEAPON_BAT") or weaponHash == GetHashKey("WEAPON_HAMMER") or weaponHash == GetHashKey("WEAPON_GOLFCLUB") or weaponHash == GetHashKey("WEAPON_NIGHTSTICK") or weaponHash == GetHashKey("WEAPON_KNUCKLE")) then
-- 			return "battu";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_DAGGER") or weaponHash == GetHashKey("WEAPON_KNIFE")) then
-- 			return "poignardé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_SNSPISTOL") or weaponHash == GetHashKey("WEAPON_HEAVYPISTOL") or weaponHash == GetHashKey("WEAPON_VINTAGEPISTOL") or weaponHash == GetHashKey("WEAPON_PISTOL") or weaponHash == GetHashKey("WEAPON_APPISTOL") or weaponHash == GetHashKey("WEAPON_COMBATPISTOL") or weaponHash == GetHashKey("WEAPON_SNSPISTOL")) then
-- 			return "abattu";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_GRENADELAUNCHER") or weaponHash == GetHashKey("WEAPON_HOMINGLAUNCHER") or weaponHash == GetHashKey("WEAPON_STICKYBOMB") or weaponHash == GetHashKey("WEAPON_PROXMINE") or weaponHash == GetHashKey("WEAPON_RPG") or weaponHash == GetHashKey("WEAPON_EXPLOSION") or weaponHash == GetHashKey("VEHICLE_WEAPON_TANK")) then
-- 			return "explosé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_MICROSMG") or weaponHash == GetHashKey("WEAPON_SMG") or weaponHash == GetHashKey("WEAPON_ASSAULTSMG") or weaponHash == GetHashKey("WEAPON_MG") or weaponHash == GetHashKey("WEAPON_COMBATMG") or weaponHash == GetHashKey("WEAPON_COMBATPDW") or weaponHash == GetHashKey("WEAPON_MINIGUN")) then
-- 			return "pulvérisé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_ASSAULTRIFLE") or weaponHash == GetHashKey("WEAPON_CARBINERIFLE") or weaponHash == GetHashKey("WEAPON_ADVANCEDRIFLE") or weaponHash == GetHashKey("WEAPON_BULLPUPRIFLE") or weaponHash == GetHashKey("WEAPON_SPECIALCARBINE") or weaponHash == GetHashKey("WEAPON_GUSENBERG")) then
-- 			return "volé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_MARKSMANRIFLE") or weaponHash == GetHashKey("WEAPON_SNIPERRIFLE") or weaponHash == GetHashKey("WEAPON_HEAVYSNIPER") or weaponHash == GetHashKey("WEAPON_ASSAULTSNIPER") or weaponHash == GetHashKey("WEAPON_REMOTESNIPER")) then
-- 			return "canardé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_BULLPUPSHOTGUN") or weaponHash == GetHashKey("WEAPON_ASSAULTSHOTGUN") or weaponHash == GetHashKey("WEAPON_PUMPSHOTGUN") or weaponHash == GetHashKey("WEAPON_HEAVYSHOTGUN") or weaponHash == GetHashKey("WEAPON_SAWNOFFSHOTGUN")) then
-- 			return "pompé";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_HATCHET") or weaponHash == GetHashKey("WEAPON_MACHETE")) then
-- 			return "éventré";
-- 		end
-- 		if (weaponHash == GetHashKey("WEAPON_MOLOTOV")) then
-- 			return "incendié";
-- 		end
-- 		return "assassiné";
-- 	end
-- 	return "assassiné";
-- end
--
-- -- Other Player died
-- function handlePlayerDeathMessage( pedID, currentPed )
-- 	local me = PlayerId()
-- 	local entity, weaponHash = NetworkGetEntityKillerOfPlayer( pedID )
-- 	local name = GetPlayerName( pedID )
--
-- 	local msg = "~o~<C>" .. name .. "</C> ~s~est mort."
--
-- 	if ( IsPedAPlayer( entity ) ) then
-- 		local killer = NetworkGetPlayerIndexFromPed( entity )
-- 		local kname = GetPlayerName( killer )
--
-- 		if ( kname == name ) then
-- 			msg = "~o~<C>" .. name .. "</C> ~s~s'est suicidé."
-- 		elseif ( kname == GetPlayerName( me ) )then
-- 			msg = "~o~<C>Vous avez</C> ~s~" .. killActionFromWeaponHash( weaponHash ) .. " ~o~<C>" .. name .. "</C>~s~."
-- 		else
-- 			msg = "~y~<C>" .. kname .. "</C>~o~ a ~s~" .. killActionFromWeaponHash( weaponHash ) .. " ~o~<C>" .. name .. "</C>~s~."
-- 		end
-- 	end
--
-- 	drawNotification( msg )
-- end
--
--
-- -- Check for death messages
-- function checkForDeaths()
--     local me = PlayerId()
--
--     for i = 0, maxPlayers, 1 do
--         if ( NetworkIsPlayerConnected( i ) ) then
--         	local currentPed = GetPlayerPed( i )
--
--         	if ( DoesEntityExist( currentPed ) and IsEntityDead( currentPed ) ) then
--        			handlePlayerDeathMessage( i, currentPed )
-- 			end
-- 		end
-- 	end
-- end
--
--
-- Citizen.CreateThread( function()
-- 	while true do
-- 		Citizen.Wait( 0 )
--
-- 		if ( featureDeathNotifications ) then
-- 			checkForDeaths()
-- 		end
-- 	end
-- end )
